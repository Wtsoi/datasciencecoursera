else if (!outcome %in% poss_outcome){
stop(print("Invalid outcome"))
}
## setting the correct data depending on the outcome
if (outcome == "heart attack"){
outcome = 11
}
else if (outcome == "heart failure"){
outcome = 17
}
else {
outcome = 23
}
## Return hospital name in that state with lowest 30-day death
print_data <- subset(read_data, State == state)
min_rate <- which(as.numeric(print_data[,outcome]) ==
(min(as.numeric(print_data[,outcome]), na.rm = TRUE)))
hosp <- print_data[min_rate,2]
sort(hosp)[1]
}
setwd("D:/Users/tsoiwa/datasciencecoursera")
best <- function(state, outcome){
## read outcome data and assign it to rdata vector
read_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## set out the possible outcome
poss_outcome <- c("heart attack","heart failure","pneumonia")
## check if state and outcome are valid
if (!state %in% read_data$State){
stop(print("Invalid state"))
}
else if (!outcome %in% poss_outcome){
stop(print("Invalid outcome"))
}
## setting the correct data depending on the outcome
if (outcome == "heart attack"){
outcome = 11
}
else if (outcome == "heart failure"){
outcome = 17
}
else {
outcome = 23
}
## Return hospital name in that state with lowest 30-day death
print_data <- subset(read_data, State == state)
min_rate <- which(as.numeric(print_data[,outcome]) ==
(min(as.numeric(print_data[,outcome]), na.rm = TRUE)))
hosp <- print_data[min_rate,2]
sort(hosp)[1]
}
best("TX","heart attack")
setwd("D:/Users/tsoiwa/datasciencecoursera")
list.files()
read.csv("outcome-of-care-measures.csv")
colnames("outcome-of-care-measures.csv")
read_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
colnames(read_data)
?order
head(read_data)
setwd("D:/Users/tsoiwa/datasciencecoursera")
rankhospital <- function(state, outcome, num = "best"){
## read outcome data and assign it to rdata vector
read_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## set out the possible outcome
poss_outcome <- c("heart attack","heart failure","pneumonia")
## check if state and outcome are valid
if (!state %in% read_data$State){
stop(print("Invalid state"))
}
else if (!outcome %in% poss_outcome){
stop(print("Invalid outcome"))
}
## setting the correct data depending on the outcome
if (outcome == "heart attack"){
outcome = 11
}
else if (outcome == "heart failure"){
outcome = 17
}
else {
outcome = 23
}
## Return hospital name in that state with lowest 30-day death
print_data <- subset(read_data, State == state)
print_data [,outcome] <- as.numeric(print_data[,outcome])
print_data <- print_data[(!is.na(print_data[,outcome])),]
print_data <- print_data[order(print_data[,outcome],print_data[,2]),]
if (num == "best"){
num <- 1
}
else if (num = "worst"){
num <- nrow(print_data)
}
return(print_data[num,2])
}
rankhospital <- function(state, outcome, num = "best"){
## read outcome data and assign it to rdata vector
read_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## set out the possible outcome
poss_outcome <- c("heart attack","heart failure","pneumonia")
## check if state and outcome are valid
if (!state %in% read_data$State){
stop(print("Invalid state"))
}
else if (!outcome %in% poss_outcome){
stop(print("Invalid outcome"))
}
## setting the correct data depending on the outcome
if (outcome == "heart attack"){
outcome = 11
}
else if (outcome == "heart failure"){
outcome = 17
}
else {
outcome = 23
}
## Return hospital name in that state with lowest 30-day death
print_data <- subset(read_data, State == state)
print_data [,outcome] <- as.numeric(print_data[,outcome])
print_data1 <- print_data[(!is.na(print_data[,outcome])),]
print_data1 <- print_data[order(print_data[,outcome],print_data[,2]),]
if (num == "best"){
num <- 1
}
else if (num = "worst"){
num <- nrow(print_data1)
}
return(print_data1[num,2])
}
rankhospital <- function(state, outcome, num = "best"){
## read outcome data and assign it to rdata vector
read_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## set out the possible outcome
poss_outcome <- c("heart attack","heart failure","pneumonia")
## check if state and outcome are valid
if (!state %in% read_data$State){
stop(print("Invalid state"))
}
else if (!outcome %in% poss_outcome){
stop(print("Invalid outcome"))
}
## setting the correct data depending on the outcome
if (outcome == "heart attack"){
outcome = 11
}
else if (outcome == "heart failure"){
outcome = 17
}
else {
outcome = 23
}
## Return hospital name in that state with lowest 30-day death
print_data <- subset(read_data, State == state)
print_data [,outcome] <- as.numeric(print_data[,outcome])
print_data <- print_data[(!is.na(print_data[,outcome])),]
print_data <- print_data[order(print_data[,outcome],print_data[,2]),]
if (num == "best"){
num <- 1
}
else if (num == "worst"){
num <- nrow(print_data)
}
return(print_data[num,2])
}
rankhospital("NC","heart attack","worst")
rankhospital("TX","heart failure",4)
rankhospital("MN","heart attack",5000)
?levels
setwd("D:/Users/tsoiwa/datasciencecoursera")
read_data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
colnames(read_data)
?grep
setwd("D:/Users/tsoiwa/datasciencecoursera")
rankall <- function(outcome, num = "best"){
## read outcome data and assign it to rdata vector
read_data <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
## set out the possible outcome
poss_outcome <- c("heart attack","heart failure","pneumonia")
## check outcome is valid
if (!outcome %in% poss_outcome){
stop(print("Invalid outcome"))
}
## setting the correct data depending on the outcome
if (outcome == "heart attack"){
outcome = 11
}
else if (outcome == "heart failure"){
outcome = 17
}
else {
outcome = 23
}
read_data <- suppressWarnings(as.numeric(levels(read_data[,outcome])[read_data[,outcome]]))
## generate an empty vector to be filled for final output
output <- vector()
states <- levels(read_data[,7])
for (i in 1:length(states)){
statedata <- read_data[grep(states[i],read_data$State),]
orderdata <- statedata[order(statedata[,outcome],statedata[,2],na.last=NA),]
hospital <- if(num == "best"){
orderdata[1,2]}
else if(num == "worst"){
orderdata[nrow(orderdata),2]}
else{
orderdata[num,2]}
output <- append(output,c(hospital,states[i]))
}
## return a data frame with hospital names and states abbreviation
output <- as.data.frame(matrix(output, length(states), 2, byrow=TRUE))
Colnames(output) <- c("hospital","states")
rownames(output) <- states
output
}
head(rankall("heart attack",20),10)
setwd("D:/Users/tsoiwa/datasciencecoursera")
rankall <- function(outcome, num = "best"){
## read outcome data and assign it to rdata vector
read_data <- read.csv("outcome-of-care-measures.csv")
## set out the possible outcome
poss_outcome <- c("heart attack","heart failure","pneumonia")
## check outcome is valid
if (!outcome %in% poss_outcome){
stop(print("Invalid outcome"))
}
## setting the correct data depending on the outcome
if (outcome == "heart attack"){
outcome = 11
}
else if (outcome == "heart failure"){
outcome = 17
}
else {
outcome = 23
}
read_data <- suppressWarnings(as.numeric(levels(read_data[,outcome])[read_data[,outcome]]))
read_data[,2] <- as.character(data[,2])
## generate an empty vector to be filled for final output
output <- vector()
states <- levels(read_data[, 7])
for (i in 1:length(states)){
statedata <- read_data[grep(states[i],read_data$State),]
orderdata <- statedata[order(statedata[,outcome],statedata[,2],na.last=NA),]
hospital <- if(num == "best"){
orderdata[1,2]}
else if(num == "worst"){
orderdata[nrow(orderdata),2]}
else{
orderdata[num,2]}
output <- append(output,c(hospital,states[i]))
}
## return a data frame with hospital names and states abbreviation
output <- as.data.frame(matrix(output, length(states), 2, byrow=TRUE))
Colnames(output) <- c("hospital","states")
rownames(output) <- states
output
}
head(rankall("heart attack",20),10)
setwd("D:/Users/tsoiwa/datasciencecoursera")
rankall <- function(outcome, num = "best"){
## read outcome data and assign it to rdata vector
read_data <- read.csv("outcome-of-care-measures.csv")
## set out the possible outcome
poss_outcome <- c("heart attack","heart failure","pneumonia")
## check outcome is valid
if (!outcome %in% poss_outcome){
stop(print("Invalid outcome"))
}
## setting the correct data depending on the outcome
if (outcome == "heart attack"){
outcome = 11
}
else if (outcome == "heart failure"){
outcome = 17
}
else {
outcome = 23
}
read_data <- suppressWarnings(as.numeric(levels(read_data[,outcome])[read_data[,outcome]]))
read_data[,2] <- as.character(read_data[,2])
## generate an empty vector to be filled for final output
output <- vector()
states <- levels(read_data[, 7])
for (i in 1:length(states)){
statedata <- read_data[grep(states[i],read_data$State),]
orderdata <- statedata[order(statedata[,outcome],statedata[,2],na.last=NA),]
hospital <- if(num == "best"){
orderdata[1,2]}
else if(num == "worst"){
orderdata[nrow(orderdata),2]}
else{
orderdata[num,2]}
output <- append(output,c(hospital,states[i]))
}
## return a data frame with hospital names and states abbreviation
output <- as.data.frame(matrix(output, length(states), 2, byrow=TRUE))
Colnames(output) <- c("hospital","states")
rownames(output) <- states
output
}
head(rankall("heart attack",20),10)
dim(read_data)
read_data[ ,2] <- as.character(read_data[ ,2])
read_data <- read.csv("outcome-of-care-measures.csv")
poss_outcome <- c("heart attack","heart failure","pneumonia")
if (!outcome %in% poss_outcome){
stop(print("Invalid outcome"))
}
setwd("D:/Users/tsoiwa/datasciencecoursera")
rankall <- function(outcome, num = "best"){
## read outcome data and assign it to rdata vector
read_data <- read.csv("outcome-of-care-measures.csv")
## set out the possible outcome
poss_outcome <- c("heart attack","heart failure","pneumonia")
## check outcome is valid
if (!outcome %in% poss_outcome){
stop(print("Invalid outcome"))
}
## setting the correct data depending on the outcome
if (outcome == "heart attack"){
outcome = 11
}
else if (outcome == "heart failure"){
outcome = 17
}
else {
outcome = 23
}
read_data <- suppressWarnings(as.numeric(levels(read_data[,outcome])[read_data[,outcome]]))
read_data[ ,2] <- as.character(read_data[ ,2])
## generate an empty vector to be filled for final output
output <- vector()
states <- levels(read_data[, 7])
for (i in 1:length(states)){
statedata <- read_data[grep(states[i],read_data$State),]
orderdata <- statedata[order(statedata[,outcome],statedata[,2],na.last=NA),]
hospital <- if(num == "best"){
orderdata[1,2]}
else if(num == "worst"){
orderdata[nrow(orderdata),2]}
else{
orderdata[num,2]}
output <- append(output,c(hospital,states[i]))
}
## return a data frame with hospital names and states abbreviation
output <- as.data.frame(matrix(output, length(states), 2, byrow=TRUE))
Colnames(output) <- c("hospital","states")
rownames(output) <- states
output
}
head(rankall("heart attack",20),10)
rankall <- function(outcome, num = "best"){
## read outcome data and assign it to rdata vector
read_data <- read.csv("outcome-of-care-measures.csv")
## set out the possible outcome
poss_outcome <- c("heart attack","heart failure","pneumonia")
## check outcome is valid
if (!outcome %in% poss_outcome){
stop(print("Invalid outcome"))
}
## setting the correct data depending on the outcome
if (outcome == "heart attack"){
outcome = 11
}
else if (outcome == "heart failure"){
outcome = 17
}
else {
outcome = 23
}
read_data[,outcome] <- suppressWarnings(as.numeric(levels(read_data[,outcome])[read_data[,outcome]]))
read_data[ ,2] <- as.character(read_data[ ,2])
## generate an empty vector to be filled for final output
output <- vector()
states <- levels(read_data[, 7])
for (i in 1:length(states)){
statedata <- read_data[grep(states[i],read_data$State),]
orderdata <- statedata[order(statedata[,outcome],statedata[,2],na.last=NA),]
hospital <- if(num == "best"){
orderdata[1,2]}
else if(num == "worst"){
orderdata[nrow(orderdata),2]}
else{
orderdata[num,2]}
output <- append(output,c(hospital,states[i]))
}
## return a data frame with hospital names and states abbreviation
output <- as.data.frame(matrix(output, length(states), 2, byrow=TRUE))
Colnames(output) <- c("hospital","states")
rownames(output) <- states
output
}
head(rankall("heart attack",20),10)
rankall <- function(outcome, num = "best"){
## read outcome data and assign it to rdata vector
read_data <- read.csv("outcome-of-care-measures.csv")
## set out the possible outcome
poss_outcome <- c("heart attack","heart failure","pneumonia")
## check outcome is valid
if (!outcome %in% poss_outcome){
stop(print("Invalid outcome"))
}
## setting the correct data depending on the outcome
if (outcome == "heart attack"){
outcome = 11
}
else if (outcome == "heart failure"){
outcome = 17
}
else {
outcome = 23
}
read_data[,outcome] <- suppressWarnings(as.numeric(levels(read_data[,outcome])[read_data[,outcome]]))
read_data[ ,2] <- as.character(read_data[ ,2])
## generate an empty vector to be filled for final output
output <- vector()
states <- levels(read_data[, 7])
for (i in 1:length(states)){
statedata <- read_data[grep(states[i],read_data$State),]
orderdata <- statedata[order(statedata[,outcome],statedata[,2],na.last=NA),]
hospital <- if(num == "best"){
orderdata[1,2]}
else if(num == "worst"){
orderdata[nrow(orderdata),2]}
else{
orderdata[num,2]}
output <- append(output,c(hospital,states[i]))
}
## return a data frame with hospital names and states abbreviation
output <- as.data.frame(matrix(output, length(states), 2, byrow=TRUE))
colnames(output) <- c("hospital","states")
rownames(output) <- states
output
}
head(rankall("heart attack",20),10)
best <- function(state, outcome){
## read outcome data and assign it to rdata vector
read_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## set out the possible outcome
poss_outcome <- c("heart attack","heart failure","pneumonia")
## check if state and outcome are valid
if (!state %in% read_data$State){
stop(print("Invalid state"))
}
else if (!outcome %in% poss_outcome){
stop(print("Invalid outcome"))
}
## setting the correct data depending on the outcome
if (outcome == "heart attack"){
outcome = 11
}
else if (outcome == "heart failure"){
outcome = 17
}
else {
outcome = 23
}
## Return hospital name in that state with lowest 30-day death
print_data <- subset(read_data, State == state)
min_rate <- which(as.numeric(print_data[,outcome]) ==
min(as.numeric(print_data[,outcome]), na.rm = TRUE))
hosp <- print_data[min_rate,2]
sort(hosp)[1]
}
best("SC","heart attack")
best("NY","pneumonia")
best("AK","pneumonia")
rankhospital <- function(state, outcome, num = "best"){
## read outcome data and assign it to rdata vector
read_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## set out the possible outcome
poss_outcome <- c("heart attack","heart failure","pneumonia")
## check if state and outcome are valid
if (!state %in% read_data$State){
stop(print("Invalid state"))
}
else if (!outcome %in% poss_outcome){
stop(print("Invalid outcome"))
}
## setting the correct data depending on the outcome
if (outcome == "heart attack"){
outcome = 11
}
else if (outcome == "heart failure"){
outcome = 17
}
else {
outcome = 23
}
## Return hospital name according to ranking
print_data <- subset(read_data, State == state)
print_data [,outcome] <- as.numeric(print_data[,outcome])
print_data <- print_data[(!is.na(print_data[,outcome])),]
print_data <- print_data[order(print_data[,outcome],print_data[,2]),]
if (num == "best"){
num <- 1
}
else if (num == "worst"){
num <- nrow(print_data)
}
return(print_data[num,2])
}
rankhospital("NC","heart attack","worst")
rankhospital("WA","heart attack",7)
rankhospital("TX","pneumonia",10)
rankhospital("NY","heart attack",7)
r<-rankall("heart attack",4)
as.character(subset(r,state=="HI")$hospital)
r<-rankall("pneumonia","worst")
as.character(subset(r, states == "NJ")$hospital)
r<-rankall("heart failure",10)
as.character(subset(r,states=="NV")$hospital)
