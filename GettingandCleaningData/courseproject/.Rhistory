!5 = 7
5 = !7
5 != 7
!5 == 7
FALSE & FALSE
TRUE & C(TRUE,FALSE,FALSE)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
pollutantmean("specdata","nitrate",70:72)
source(pollutantmean.r)
source(pollutantmean.R)
pollutantmean("specdata","nitrate",23)
pollutantmean("specdata","nitrate",23)
pollutantmean("specdata","nitrate",23)
q()
library(swirl)
swirl()
True|c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
bye()
q()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags(,11:17)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmasses,summary)
tapply(flags$population,flags$landmass,summary)
library(datasets)
data(iris)
?iris
head(iris)
tapply(iris$Sepal.length,iris$Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
nrow(iris)
?apply
apply(iris,2,mean)
colMeans(iris)
colMeans(iris[,1:4])
data(mtcars)
summary(mtcars)
tapply(mtcars$mpg,mtcars$cyl)
tapply(mtcars$mpg,mtcars$cyl,mean)
lapply(mtcars,mean)
mean(mtcars$mgp,mtcars$cyl)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
with(mtcars(tapply(mpg,cyl,mean)))
apply(mtcars,2,mean)
x <- lapply(mtcars$cyl=4,mean)
mtcars
lapply(mtcars$cyl[,4],mean)
lapply(mtcars$cyl[4],mean)
tapply(mtcars$hp,mtcars$cyl[4],mean)-tapply(mtcars$hp,mtcars$cyl[8],mean)
tapply(mtcars$hp,mtcars$cyl[4],mean)
tapply(mtcars$hp,mtcars$cyl[4],mean)
tapply(mtcars$hp,mtcars$cyl,mean)
vapply(mtcars,unique)
vapply(mtcars$cyl,unique)
lapply(mtcars,unique)
x <- tapply(mtcars$hp,mtcars$cyl(4),mean)
x <- tapply(mtcars$hp,mtcars$cyl[4],mean)
x <- tapply(mtcars$hp,mtcars$cyl,mean)
x
x[8]-x[4]
x[,3]-x[,1]
x[3]-x[1]
debug(ls)
ls
ls()
1
stop
exit
library(datasets)
data(iris)
rnum(iris)
rnumb(iris)
iris
?rnum
??rnum
?rcount
tapply(iris$Species,iris$Sepal.Length,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
round(tapply(iris$Sepal.Length,iris$Species,mean),0)
data(mtcars)
head(mtcars)
X <- tapply(mtcars$hp,mtcars$cyl,mean)
x
print(X)
X[3]-X[1]
round(X[3]-X[1],0)
set.seed(1)
rpois(5,2)
q()
library(swirl)
swirl()
bye
exit
info
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
inside.names(plants)
inside. names(plants)
names(plants)
head(plants)
head(plants[10])
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?str
library(swirl)
swirl()
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),100,prob=c(0.3,0.7))
sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips <- sample(c(0,1),100,replace = TRUE,prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2 <- rbinom(c(0,1),100,prob=0.7)
flips2 <- rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5,10)
replicate(100,rpois(5,10))
my_pois <- replicate(100,rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(x=cars$dist,y=cars$speed)
plot(x=cars$speed,y=cars$dist)
plot(x=cars$speed,y=cars$dist,xlab="Speed")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(cars,main="My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim= c(10,15))
plot(cars,pch=2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(mgp~cyl,data=mtcars)
boxplot(mpg~cyl, data=mtcars)
his(mtcars$mpg)
hist(mtcars$mpg)
q()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
getwd()
list.dirs()
setwwd(../R)
setwd(../R)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl,dest = "./R/getdataCleaning.csv")
list.files("./R")
q()
getwd()
list.files()
require(xlsx)
install.packages("jsonlite")
intall.packages("httpuv")
intall.packages('httpuv')
install.packages('httpuv')
install.packages('httr')
library("jsonlite")
library("httpuv")
library("httr")
myapi <- oauth_app(("github"),key = "36d33cb42e9f33c2156e", secret = "179e81133eb0dafaf9c0b6d4c2a5f52d76eb8ea1")
github_app <- oauth2.0_token(oauth_endpoints("github"), myapi)
req1 <- GET("https://api.github.com/users/jtleek/repos",config(token = github_app))
myjson <- content(req1)
myjson1 <- jsonlite::fromJSON(toJSON(myjson))
view(myjson1)
View(myjson1)
myjson1
stop_for_status(req1)
names(myjson1)
myjson1[1,1:4]
myjson1$created_at
myjson1$created_at[11]
library("sqldf")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
myfile <- file.path(getwd(),"ss06pid.csv")
download.file(url, myfile)
qry1 <- sqldf("select pwgtpl from acs where AGEP < 50")
install.packages("sqldf")
library(sqldf)
qry1 <- sqldf("select pwgtpl from acs where AGEP < 50")
list.files()
acs <- read.csv("ss06pid.csv"")
acs <- read.csv("ss06pid.csv")
qry1 <- sqldf("select pwgtpl from acs where AGEP < 50")
qry1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
qry2 <- sqldf("select * from acs where AGEP < 50")
qry3 <- sqldf("sqldf("select * from acs")")
qry3 <- sqldf("select * from acs")")
qry3 <- sqldf("select * from acs")
qry4 <- sqldf("select pwgtp1 from acs"")
qry4 <- sqldf("select pwgtp1 from acs")
qry1
unique((acs$AGEP))
sqldf("select distinct AGEP from acs")
library(httr)
library(XML)
myurl <- url("http://biostat.jhsph.edu/~jleek/contact.html")
myline <- readLines(myurl)
close(myurl)
mychar<-c(nchar(mylines[10]),nchar(myline[20]),nchar(myline[30]),nchar(myline[100])
mychar<-c(nchar(mylines[10]),nchar(myline[20]),nchar(myline[30]),nchar(myline[100]))
mychar<-c(nchar(myline[10]),nchar(myline[20]),nchar(myline[30]),nchar(myline[100]))
mychar
url1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
width <- c(1,9,5,4,1,3,5,4,1,3,5,4,1,3,5,4,1,3)
fixed <- read.fwf(url1,width,header=false,skip=4)
fixed <- read.fwf(url1,width,header=FALSE,skip=4)
sum(fixed$V8)
names(fixed)
head(fixed)
sum(fixed$v4*fixed$V8)
width(fixed)
readlines(url1,n=10)
readLines(url1,n=10)
summary(url1)
url1
head(url1)
head(fixed)
sum(fixed$V4)
library(swirl)
swirl()
mydf <- read.csv("parth2csv", stringAsFactors = FALSE)
mydf <- read.csv(parth2csv=", stringAsFactors = FALSE)
mydf <- read.csv(parth2csv, stringAsFactors = FALSE)
mydf <- read.csv(parth2csv)
?read.csv
mydf <- read.csv(path2csv)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 AND r_os = "linux-gnu")
filter(cran, size > 100500, r_os = "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, "size:ip_id")
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version),ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, sizw)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count,prob=0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(count()))
top_counts_sorted <- arrange(top_counts,desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
arrange(pack_sum,desc(unique))
arrange(top_unique,desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_counts_sorted)
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>%
select(ip_id,country,package,size) %>%
print
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(student2,sex_class,count,-grade)
res <- gather(students2,sex_class,count,-grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number(("class5"))
parse_number("class5")
?mutate
submit()
submit()
submit()
students4
submit()
submit()
?unique
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
mutate(passed,status = passed$final)
passed <- passed %>% mutate(status = "passed")
failed <- failed%>%mutate(status = "failed")
?bind_rows
bind_rows(passed,failed)
sat
submit()
submit()
submit()
q
q()
library(swirl)
library("swirl")
library("swirl")
library(swirl)
q()
library(swirl)
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
sys.getlocale("LC_TIME")
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
year()
year(this_day)
wday(this_day)
wday(this_day,label =TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date<-ymd("1989-05-17")
my_data
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("19201//2")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this this_moment
this_moment
this_moment <- update(this_moment, hours = 11, minutes = 14)
this_moment
?now
nyc <- now(tzone="America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes (50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz ="Singapore")
last_time
?interval
how_long <- interval(last_time%--%arrive)
how_long <- interval(last_time, arrive, tzone = attr(last_time,"tzone"))
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
q()
getwd()
setwd("..")
getwd()
list.files()
setwd("D:/Users/tsoiwa/datasciencecoursera/GettingandCleaningData")
getwd()
if(!file.exists("./courseproject")){dir.create("./courseproject")}
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileurl, destfile = "./courseproject/Dataset.zip")
list.files()
setwd("Courseproject")
list.files()
unzip(zipfile = "./courseproject/Dataset.zip", exdir = "./courseproject")
setwd("..")
list.files()
unzip(zipfile = "./courseproject/Dataset.zip", exdir = "./courseproject")
setwd("courseproject")
list.files()
